 <!DOCTYPE html>
 <html lang="en">
   <head>
    <meta charset="utf-8">
    <!-- <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"> -->
    <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Radiando.net2</title>

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
    <!-- Bootstrap core CSS -->
    <link href="/realSite/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom fonts for this template -->
    <link href="/realSite/vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic" rel="stylesheet" type="text/css">

    <!-- Plugin CSS -->
    <!-- <link href="/realSite/vendor/magnific-popup/magnific-popup.css" rel="stylesheet" type="text/css"> -->

    <!-- Custom styles for this template -->
    <link href="/realSite/css/freelancer.min.css" rel="stylesheet">
    <style>
       /*Header*/
       header {
         background-size: cover;
         background-attachment: fixed;
         background-position: center center;
         background-attachment: scroll;
       }
       header {
         position: relative;
         height: 100%;
         z-index: 0;
       }
       .txtShadow {
         text-shadow: 5px 5px 5px rgba(50, 33, 55, 0.6);
       }
       .txtShadow2 {
         text-shadow: 5px 5px 5px rgba(50, 33, 55, 0.5);
       }
       hr#head_star.star-light:after, hr#head_star.star-primary:after {
         color:;
       }
       hr.star-light:after {
            background-color: transparent;
       }
       hr {
           box-sizing: content-box;
           height: 0;
           overflow: visible;
       }
       .avatarImg {
         height: auto;
         width: auto;
         max-width: 250px;
         max-height: 250px;
       }
       .avatar_circle{
          border-radius: 100%;
          box-shadow: 0 0 8px rgba(0, 0, 0, .8) ;
          -webkit-box-shadow: 0 0 8px rgba(0, 0, 0, .8);
          -moz-box-shadow: 0 0 8px rgba(0, 0, 0, .8);
          /*padding: 2px;*/
        }7
        .txtShadow {
          text-shadow: 5px 5px 5px rgba(50, 33, 55, 0.6);
        }
        .txtShadow2 {
          text-shadow: 5px 5px 5px rgba(50, 33, 55, 0.5);
        }

      /*Porfólio*/
      .imgBox {
        width: 360px;
        height: 260px;
        max-width: 100%;
        background-size: cover;
        background-position: center  center;
        background-repeat: no-repeat;
        margin-bottom: 10px;
      }
      div .imgBox:hover {
        opacity: 0.9;
        filter: alpha(opacity=90); /* For IE8 and earlier */
      }

      .modal-lg {
          max-width: 95%;
      }
      .modal-header {
        margin-top: 20px;
        border-bottom: 0px
      }
      .modal-footer {
        border-top: 0px
      }
      .modal-body {
        padding: 0rem;
      }
      .fa-3x {
          font-size: 2em;
      }
      .navbar-default {
        background-color:red !important;
      }
      [v-cloak] {
        display: none;
      }
    </style>

    <script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js"></script>
    <script>
    // Load a Google font by name.
    var loadFont = function(font) {
      WebFont.load({
        google: {
          families: [font]
        }
      });
    };

    </script>
  </head>
  <body id="page-top" >
    <%= erb :modals %>
    <div id="app" v-if="dataIsLoaded" v-cloak>
      <%= yield %>
    </div>
    <!-- Bootstrap core JavaScript -->
    <script src="https://unpkg.com/vue"></script>
    <script src="/realSite/vendor/jquery/jquery.min.js"></script>
    <script src="/realSite/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Plugin JavaScript -->
    <script src="/realSite/vendor/jquery-easing/jquery.easing.min.js"></script>


    <!-- Contact Form JavaScript -->
    <script src="/realSite/js/jqBootstrapValidation.js"></script>
    <script src="/realSite/js/contact_me.js"></script>


    <!-- Custom scripts for this template -->
    <script src="/realSite/js/freelancer.js"></script>
    <!-- template for the modal component -->

    <script src='https://www.google.com/recaptcha/api.js'></script>
    <script>
    Array.prototype.getUnique = function() {
        return [...new Set( [this] )];
    };

    // function trimObj(badJson) {
    //   return JSON.parse(JSON.stringify(badJson).replace(/(\\)?"\s*|\s+"/g, ($0, $1) => $1 ? $0 : '"'))
    // }

    // register modal component
    // register modal component
window.Vue = require('vue');
import VueResource from "vue-resource"
Vue.use(VueResource);

    Vue.component('editable',{
      template:'<div contenteditable="true" @input="update"></div>',
      props:['content'],
      mounted:function(){
        this.$el.innerText = this.content;
      },
      methods:{
        update:function(event){
          this.$emit('update',event.target.innerText);
        }
      }
    })

  Vue.component('modal', {
    template: '#modal-template',
    props: {
      show: {
        type: Boolean,
        required: true,
        twoWay: true
      }
    }
  })


    var dataURL = '/dataLoad';
    new Vue({
      el: '#app',

      data: {
        siteData: {},
        dataIsLoaded:false,
        showModal: false,
        tagSelector: 'all'
      },
      created: function () {
        this.fetchData();
        // this.loadFont(this.siteData.navbar.logo.fontFamily)
      },
      updated: function (){
        //Carregas as fontes do Google
        this.loadFont(this.siteData.navbar.logo.fontFamily)
        this.loadFont(this.siteData.head.fontFamily)

      },
      methods: {
        getItemsTags: function(event) {
          //Pega a lista de todas as tags utilizadas
          let itemsTags = []
          this.siteData.portfolio.items.forEach( function(s) {
             (s.tags || []).forEach( function(tag) {
                itemsTags.push(tag);
             })
          } );
          //Retira os valores duplicados e faz uma ordenação alfabética
          itemsTags = itemsTags.filter((x, i, a) => a.indexOf(x) == i).sort()
          console.log("itemsTags:",itemsTags)
          this.siteData.portfolio.itemsTags = itemsTags
        },

        select: function(event) {
          this.tagSelector = event
          console.log(event); // returns 'foo'
        },
        tt: function(x) {
          console.log(x); // returns 'foo'
        },
        saveDiv: function(obj, val){
          // if (val != undefined) {val = val.trim();}
          if (val){
            // val = val.replace(/<(?:.|\n)*?>/gm, '')
            val = val.replace(/&lt;(?:.|\n)*?&gt;/gim, '')
            val = val.replace(/&nbsp;/gim, '')
          }
          this.$http.post("/objSave", {obj: obj, val: val}).then(function (response) {
                  // Success
                  console.log(response.data)
              },function (response) {
                  // Error
                  console.log(response.data)
              });;
        },
        fetchData: function () {
          var self = this;
          $.getJSON( dataURL, function( data ) {
              self.siteData = data;

              //Force images reload cache
              for (index = 0; index < self.siteData.portfolio.items.length; index++) {
                self.siteData.portfolio.items[index].img +='?decache=' + (Math.random()*1000);
              }

              console.log(self.siteData)
              self.dataIsLoaded = true;
          });

        },
        loadFont: function (font){
          loadFont(font);
        }
      },
        computed: {
          filteredList() {
            this.getItemsTags()
            if (!this.siteData.portfolio.itemsTags) {
              return this.siteData.portfolio.items
            } else {
              return this.siteData.portfolio.items.filter( item => {
                if (this.tagSelector == "all" ){
                  return item.tags || this.siteData.portfolio.items
                }else{
                  if (item.tags){
                    return item.tags.includes(this.tagSelector)
                  }
                }
              })
            }
          }
      }
    });
    </script>
      <script src="/js/js.js"></script>
  </body>
 </html>
